<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>【随笔】unity实现动态对话系统</title>
    <link href="/2024/12/07/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91unity%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/"/>
    <url>/2024/12/07/%E3%80%90%E9%9A%8F%E7%AC%94%E3%80%91unity%E5%AE%9E%E7%8E%B0%E5%8A%A8%E6%80%81%E5%AF%B9%E8%AF%9D%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="什么是动态对话系统？"><a href="#什么是动态对话系统？" class="headerlink" title="什么是动态对话系统？"></a>什么是动态对话系统？</h3><p>在《上古卷轴》中，玩家会无数次从不同的卫兵的口中听到相同的一句著名台词：“我曾经也和你一样是位冒险家，直到我的膝盖中了一箭”；在《巫师3：狂猎》中，“血腥男爵”上一秒还在声泪俱下苦苦哀求玩家去拯救他妻女，下一秒便换上油腻的笑容，“来局昆特牌吧，我打赌你赢不了我！”这是传统的对话系统不可避免会遇到的问题，而这个问题的答案就是动态对话系统。动态对话系统能够根据多方面因素使得npc的台词“更合理”，从而减少对话“穿帮”的可能，以此增强玩家的代入感。</p><p>将游戏接入大语言模型来构建动态对话系统或许是个好办法，尽管这个办法还并不成熟。与此同时我们注意到，已经有一些游戏通过相对简单的架构走在了实现动态对话系统的路上。本文将以《哈迪斯》为例，分析、拆解动态对话系统的实现。</p><h3 id="《哈迪斯》中的动态对话系统"><a href="#《哈迪斯》中的动态对话系统" class="headerlink" title="《哈迪斯》中的动态对话系统"></a>《哈迪斯》中的动态对话系统</h3><p>《哈迪斯》是一款肉鸽游戏，讲述了冥界的王子一次次逃离故乡的故事。游戏中有大量的npc，由于其肉鸽属性，玩家会与这些npc反复见面。《哈迪斯》的制作组Supergaint借助动态对话系统，使得玩家每一次遇到npc时，几乎都能得到新的对话。例如，boss会对你携带的新武器评头论足，或者是总结上次被你战胜的失败经验；npc会赞扬你无伤过关的壮举，或者质疑你放弃强化的决策。剧情进度、角色好感度、过关时间、过关战损、装备、强化构筑、祝福的种类与稀有度……几乎你能想到的一切都会对你与npc之间的对话产生影响，这给予了玩家一种私密的个人化体验，肉鸽闯关不再是千篇一律的流程重复，而是独属于你的个人冒险。</p><p>那么，我们该如何实现《哈迪斯》中教科书般的动态对话系统呢？首先，毋庸置疑的，我们需要大量的文本提供支撑。对于一款动作肉鸽游戏来说，这是令人震撼的。其次，我们需要合理的架构来供文本填充。</p><h3 id="动态对话系统的架构"><a href="#动态对话系统的架构" class="headerlink" title="动态对话系统的架构"></a>动态对话系统的架构</h3><h5 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h5><p>想象我们的游戏中的商店老板是个势利眼。每当玩家控制角色走进商店，他都要对玩家的衣着审视一番：如果角色衣着华贵，老板会热情迎接；如果角色衣着寒酸，老板则爱搭不理。那么很容易的，我们只需要以玩家装备的价值进行条件判断，再根据结果让老板作出不同反应即可。我们可以说，条件判断是动态对话系统最基础的一环。</p><h5 id="标签化"><a href="#标签化" class="headerlink" title="标签化"></a>标签化</h5><p>然而，目前我们的商店老板还不够“智能”——试想玩家身着华服接受老板的招待后，出门换上一套破烂再返回商店，老板立刻摆起一副臭脸。我们想要让老板“记住”玩家并对玩家建立一个“印象”，玩家的每一次到访老板都要根据这一印象来做出不同的反应。或许你会想到使用好感度来实现，然而遗憾的是，好感度系统并不能满足我们的需求。好感度只记录当前npc对玩家的好感数值，忽略了好感度的变化过程与变化原因，而动态对话系统恰恰要根据变化的过程与原因来决定对话内容。回到刚才的例子，当玩家穿着破衣服第一次走入商店，我们可以为老板添加一个【第一印象-贫穷】的标签；当玩家换上昂贵的衣服再次回到商店，对话系统检测到“玩家当前装备价值高”与“老板拥有【第一印象-富有】标签”这两个条件同时存在，则让老板展现极其震惊的反应，同时更改标签或添加新标签。</p><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>当npc与玩家角色偶遇时，一句必要的寒暄自然是有礼貌的表现；然而，如果当前存在该npc发布的任务或委托，我们应当优先让npc表现出对任务进度的关心。优先级应当使用层级架构，不同层级具有不同的优先度，而层级之下的具体对话也具有优先度——不妨把这个由许多条对话组成的多重优先级系统成为一个“对话块”。让我们通过一个例子来说明：玩家遇到了一个npc，我们想要在二者之间触发一段对话。当对话事件开始时，程序会找到该npc拥有的对话块，从具有最高优先度的层级（这里我们称其为主线剧情层级）开始，以优先级顺序检索该层级下所有子对话，通过标签化的条件判断找到一个可用对话并输出；如果该层级下没有可用对话，则继续检索支线剧情层级、日常对话层级等等。</p><h5 id="不！选择肢……"><a href="#不！选择肢……" class="headerlink" title="不！选择肢……"></a>不！选择肢……</h5><p>《哈迪斯》中角色之间的对话是不存在选择肢的。如果我们试图在当前对话系统的基础上引入选择肢，可想而知的是，这将成倍增加本就已经非常巨大的文本量。让我们把这个令人头疼的问题抛给文案策划，只考虑程序层面的解决方案：首先，我们需要将对话选项视为一个新的对话块（或者更贴切一些，选项块），区别在于，选项块并不需要复杂的层级、优先级架构，我们只需要通过标签化的条件判断检索出所有可用的选项即可；接着，对于每一个选项，我们都要建立一个独立的对话块，当玩家选择了某项选项后，用我们处理一般对话的方式处理接下来的对话即可；最后，我们将对话块与选项块进行合理链接，确保对话-对话引出选项-选择选项-继续对话这一流程的顺利进行。（一个比较明智的决策是，不要把从属于选项的对话块设计的过于复杂。）</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>笔者在设计文字冒险游戏的过程中遇到了一些困难，经过资料查阅与思考后写下此文。特别感谢油管大佬<a href="https://www.youtube.com/@PeopleMakeGames"><br>People Make Games</a>的视频<a href="https://www.youtube.com/watch?v=bwdYL0KFA_U&t=132s">The System Behind Hades’ Astounding Dialogue</a>，为本文提供了宝贵的思路。</p>]]></content>
    
    
    
    <tags>
      
      <tag>随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【2023 CIGA GameJam】Blind Touch</title>
    <link href="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/"/>
    <url>/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/</url>
    
    <content type="html"><![CDATA[<p>​2023年7月，我在Lyreyia前辈的邀请下第一次参加GameJam。虽然在此之前已经学习了几个月的Unity，但是不得不承认还是有点紧张，当然更多的是兴奋（笑）。</p><p>​椰岛站场地在普陀区，日常羡慕徐汇校区。场地给人的印象确实是非常宽敞，大概能容纳几百人的样子。</p><p>​下午五点公布了今年的主题：touch。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_2.png" class="" title="现场公布主题"><center> <font size=2> 现场公布主题</font></center><p>​这里介绍一下我们的团队：原本是1策3程1美1音的构成，然而GJ开始当天的上午美术和音乐相继宣告因为有事而离队……也算是GJ中不得不品的一环啦。</p><p>​总之，在拿到主题后团队的剩余四人立即开始了脑暴，最终决定制作一款扮演盲人通过“touch”来走出地牢的游戏。</p><p>​可以看出来，我们的这款游戏的机制还是比较简单的，在3程序的豪华阵容下理论上能够很快完成……</p><p>​不出意外的话，意外就要发生了。</p><p>​首先，编辑器版本没有统一。由于没有事先协商统一好编辑器的版本，导致只能现场下载一个确定的新版本。雪上加霜的是，现场的网络出现了神秘的问题，导致下载速度堪比守望先锋1的更新速度，并且不断爆出下载错误。 </p><p>​其次，版本控制系统使用不熟练。费了很大的力才使得所有人都成功接入项目，耽误了不少时间。这里我们使用的是Plastic SCM（下次可以换一个吗）。</p><p>​上述其实都是经验不足暴露出的问题，也是我在第一次GameJam中最大的收获之一。解决了这些问题后，我们的开发进程才算是开始稳步推进了下去。我在其中主要负责了动画效果的实现，美术、音乐资源的导入与应用，以及实现了其他的一些小功能。总体来说还是相对轻松的。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_3.png" class="" title="小队成员在工作"><center> <font size=2> 小队成员在工作</font></center><p>​此次GameJam还有一点让我感触颇多。不同于大学生站点，椰岛站参赛队伍更多是由社会人员构成（因为队内主策是在职哥，所以我们只得选择椰岛站），许多队伍其实已经提前准备好完成度较高的作品，等到题目公布之后稍作修改，硬蹭主题即可；甚至有一队带着已经准备商业化作品参赛，展示时还在宣传特们的玩家群（笑）。虽然这样的作品能保证具有很高的完整度，但是我觉得如此这般已经失去了GameJam的意义。</p><p>​最后介绍一下我们的游戏——Blind Touch（其实我很想吐槽前辈起的这个名字啦）。</p><p>​进入第一关，玩家发现自己操控的目盲小人身处一片黑暗之中，在2D的俯视角下，玩家只能看到角色周围的一小块区域。玩家通过WASD键进行移动，通过上下左右键进行“touch”。小人虽然因为失明无法看到迷宫的构造，但是可以通过touch来对迷宫进行探索——一旦touch到了墙体，墙体周围的区域将被点亮，代表着这一区域已经被小人记在了脑海之中。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_4.png" class="" title="玩家发现自己身处黑暗之中"><center> <font size=2> 玩家发现自己身处黑暗之中</font></center><p>​玩家操控的小人一路摸索，最终找到了出口——这里可以注意到，被点亮过的区域有些已经重新变回黑暗。这是因为我们给小人添加了“遗忘”机制：随着时间推移，小人可能会忘记记忆中的迷宫结构，之前已touch的区域将慢慢重新变回黑暗。这意味着玩家在探索迷宫的过程中还要与时间赛跑，否则小人将被困在黑暗的迷宫中。</p><p>​当然，为了避免游戏难度过高，我们制作了“罗盘”：右上角的罗盘将指向出口的大致方位，为玩家提供指引。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_5.png" class="" title="通过摸索，找到出口"><center> <font size=2> 通过摸索，找到出口</font></center><p>​漆黑的地牢中除了有错综复杂的道路，还有带来惊喜的宝箱。宝箱能够为我们孱弱的小人提供强大的一次性道具，例如图中右下角UI显示的“爆破手套”。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_6.png" class="" title="玩家发现了地牢中的宝箱"><center> <font size=2> 玩家发现了地牢中的宝箱</font></center><p>​玩家按空格即可使用道具。爆破手套能够将迷宫的墙体直接炸开，从而使玩家能够在任何时候、任何位置开辟出新的道路，创造新的通关可能。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_7.png" class="" title="使用爆破手套破墙"><center> <font size=2> 使用爆破手套破墙</font></center><p>​地牢中还存在着图中展示的机关，操纵机关可以改变墙体的位置，玩家需要不断调整机关，找到通往出口的正确道路。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_8.png" class="" title="玩家发现了地牢中的机关"><center> <font size=2> 玩家发现了地牢中的机关</font></center><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_9.png" class="" title="玩家调整机关"><center> <font size=2> 玩家调整机关，发现出口</font></center><p>​在游戏初期，我们会在每一个关卡逐步引入新机制，从最开始的移动、“touch”教学，到各种各样的道具，再到变化莫测的地牢机关，使玩家一步步深入、熟悉游戏的全部机制。在设计最后一关时，我们将先前全部的机制都纳入到了该关卡之中，向玩家发起“最终考核”。</p><img src="/2024/01/24/%E3%80%902023CIGAGameJam%E4%BD%9C%E5%93%81%E3%80%91BlindTouch/1_10.png" class="" title="最后一关的规模非常庞大"><center> <font size=2> 最后一关的规模非常庞大</font></center><p>​以上就是我们作品——Blind Touch的介绍。最后附本游戏的b站介绍视频</p><iframe src="//player.bilibili.com/player.html?isOutside=true&aid=785762626&bvid=BV1r14y1R7XA&cid=1192550824&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe>]]></content>
    
    
    
    <tags>
      
      <tag>GameJam</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
